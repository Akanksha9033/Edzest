{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\happy\\\\Downloads\\\\edzest-website-3\\\\src\\\\DragAndDropQuiz\\\\Set1\\\\DragAndDropQuiz1.js\",\n  _s = $RefreshSig$();\n// import { FaSyncAlt } from \"react-icons/fa\"; // Import refresh icon from react-icons\n// // import InstructionPage from \"../Components/InstructionPage\"; // Import the InstructionPage component\n// import DragItem from \"../Components/DragItem\"; // Import the DragItem component, which represents draggable items\n// import DropZone from \"../Components/DropZone\"; // Import the DropZone component, which represents areas where items can be dropped\n// import Score from \"../Components/Score\"; // Import the Score component to display the user's score\n// import Solution from \"../Components/Solution\"; // Import the Solution component to show correct answers\n// import quizData from \"./quizData\"; // Import quiz data (questions, terms, and definitions)\n// import { useState, useEffect } from \"react\"; // Import React hooks for managing state and side effects\n// import \"../../Styles/DragAndDropQuiz.css\"; // Import the CSS file for styling\n\n// // Function to shuffle an array using the Fisher-Yates algorithm\n// const shuffleArray = (array) => {\n//   let shuffled = [...array]; // Create a copy of the original array\n//   for (let i = shuffled.length - 1; i > 0; i--) {\n//     const j = Math.floor(Math.random() * (i + 1)); // Generate a random index\n//     [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]; // Swap elements\n//   }\n//   return shuffled; // Return the shuffled array\n// };\n\n// // Main component for the drag-and-drop quiz\n// const DragAndDropQuiz1 = () => {\n//   // State variables to manage quiz behavior\n//   // const [showInstructions, setShowInstructions] = useState(true); // Show/hide instructions\n//   const [currentQuestion, setCurrentQuestion] = useState(0); // Track the current question index\n//   const [score, setScore] = useState(0); // Track the user's score\n//   const [userMatches, setUserMatches] = useState({}); // Store user's matched answers\n//   const [solutions, setSolutions] = useState(Array(quizData.length).fill([])); // Store solutions for each question\n//   const [showSolution, setShowSolution] = useState(false); // Show/hide the solution modal\n//   const [quizCompleted, setQuizCompleted] = useState(false); // Track if the quiz is completed\n//   const [placedItems, setPlacedItems] = useState({}); // Track placed draggable items\n//   const [shuffledDefinitions, setShuffledDefinitions] = useState([]); // Store shuffled definitions for the current question\n\n//   // Effect to shuffle definitions whenever the question changes\n//   useEffect(() => {\n//     if (quizData[currentQuestion]) {\n//       setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\n//     }\n//   }, [currentQuestion]); // Runs whenever `currentQuestion` changes\n\n//   // Function to handle the start of a drag event\n//   const handleDragStart = (e, term) => {\n//     // e.dataTransfer.setData(\"term\", term); // Store the dragged term in the event data\n//     e.dataTransfer.setData(\"text/plain\", term);\n//   };\n\n//   // Function to handle when an item is dropped into a drop zone\n//   const handleDrop = (e, definition) => {\n//     const draggedTerm = e.dataTransfer.getData(\"term\"); // Retrieve the dragged term\n//     const isCorrect = draggedTerm === definition.match; // Check if the match is correct\n\n//     // Prevent overriding an already placed item\n//     if (!placedItems[currentQuestion]?.[definition.text]) {\n//       // Update user matches\n//       setUserMatches((prev) => ({\n//         ...prev,\n//         [currentQuestion]: [\n//           ...(prev[currentQuestion] || []),\n//           {\n//             term: draggedTerm,\n//             correct: isCorrect,\n//             correctMatch: definition.match,\n//           },\n//         ],\n//       }));\n\n//       // Store placed items to prevent reusing them\n//       setPlacedItems((prev) => ({\n//         ...prev,\n//         [currentQuestion]: {\n//           ...prev[currentQuestion],\n//           [definition.text]: draggedTerm,\n//         },\n//       }));\n//     }\n//   };\n\n//   // Function to check and increase the score if all answers are correct\n//   const checkAndIncreaseScore = (questionIndex) => {\n//     const matches = userMatches[questionIndex] || [];\n//     if (\n//       matches.length === quizData[questionIndex].terms.length && // Check if all terms are matched\n//       matches.every((match) => match.correct) // Ensure all matches are correct\n//     ) {\n//       setScore((prev) => prev + 1); // Increment score\n//     }\n//   };\n\n//   // Function to proceed to the next question\n//   const nextQuestion = () => {\n//     // Save the user's answers before moving to the next question\n//     setSolutions((prevSolutions) => {\n//       const updatedSolutions = [...prevSolutions];\n//       updatedSolutions[currentQuestion] = [...(userMatches[currentQuestion] || [])];\n//       return updatedSolutions;\n//     });\n\n//     checkAndIncreaseScore(currentQuestion); // Check if the answer is correct and update the score\n\n//     if (currentQuestion < quizData.length - 1) {\n//       setCurrentQuestion((prev) => prev + 1); // Move to the next question\n//     }\n//   };\n\n//   // Function to submit the quiz\n//   const handleSubmit = () => {\n//     setSolutions((prevSolutions) => {\n//       const updatedSolutions = [...prevSolutions];\n//       updatedSolutions[currentQuestion] = [...(userMatches[currentQuestion] || [])];\n//       return updatedSolutions;\n//     });\n\n//     checkAndIncreaseScore(currentQuestion); // Update score\n//     setQuizCompleted(true); // Mark quiz as completed\n//   };\n\n//   // Function to refresh the current question\n//   const handleRefresh = () => {\n//     // Prevent refresh if no attempt was made\n//     if (!userMatches[currentQuestion] || userMatches[currentQuestion].length === 0) {\n//       return;\n//     }\n\n//     // Reset matches and placed items for the current question\n//     setUserMatches((prev) => ({\n//       ...prev,\n//       [currentQuestion]: [],\n//     }));\n//     setPlacedItems((prev) => ({\n//       ...prev,\n//       [currentQuestion]: {},\n//     }));\n\n//     // Reshuffle definitions\n//     setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\n//   };\n\n//   return (\n//     <div className=\"quiz-container\">\n//       {showSolution ? ( // If the solution is being viewed\n//         <Solution\n//           solutions={solutions}\n//           totalQuestions={quizData.length}\n//           closeSolution={() => setShowSolution(false)}\n//           quizData={quizData}\n//           quizCompleted={quizCompleted}\n//         />\n//       ) : (\n//         <>\n//           {/* Display the current question */}\n//           <div className=\"question-header\">\n//             <h2>\n//               Q{currentQuestion + 1}. {quizData[currentQuestion]?.question}\n//             </h2>\n//           </div>\n\n//           <div className=\"quiz-content\">\n//             {/* Container for draggable terms */}\n//             <div className=\"drag-container\">\n//               {quizData[currentQuestion].terms.map(\n//                 (term, index) =>\n//                   !(\n//                     placedItems[currentQuestion] &&\n//                     Object.values(placedItems[currentQuestion]).includes(term)\n//                   ) && (\n//                     <DragItem\n//                       key={index}\n//                       term={term}\n//                       handleDragStart={handleDragStart}\n//                     />\n//                   )\n//               )}\n//             </div>\n\n//             {/* Container for drop zones */}\n//             <div className=\"drop-container\">\n//               {shuffledDefinitions.map((definition, index) => (\n//                 <DropZone\n//                   key={index}\n//                   definition={definition}\n//                   handleDrop={handleDrop}\n//                   placedItem={placedItems[currentQuestion]?.[definition.text]}\n//                 />\n//               ))}\n//             </div>\n//           </div>\n\n//           {!quizCompleted && (\n//             <>\n//               {/* Show \"Next\" button if there are more questions, otherwise show \"Submit\" */}\n//               {currentQuestion < quizData.length - 1 ? (\n//                 <button onClick={nextQuestion} className=\"next-btn\">\n//                   Next\n//                 </button>\n//               ) : (\n//                 <button onClick={handleSubmit} className=\"btn btn-primary\">\n//                   Submit\n//                 </button>\n//               )}\n//             </>\n//           )}\n\n//           {/* Display score after completing the quiz */}\n//           {quizCompleted && (\n//             <div className=\"score-container\">\n//               <Score\n//                 score={score}\n//                 totalQuestions={quizData.length}\n//                 viewSolution={() => setShowSolution(true)}\n//               />\n//             </div>\n//           )}\n\n//           {/* Refresh button */}\n//           <div className=\"refresh-container\">\n//             <FaSyncAlt className=\"refresh-icon\" onClick={handleRefresh} />\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default DragAndDropQuiz1;\n\nimport React, { useState, useEffect } from \"react\";\nimport quizData from \"./quizData\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport InstructionPage from \"../Components/InstructionPage\";\nimport DragItem from \"../Components/DragItem\";\nimport DropZone from \"../Components/DropZone\";\nimport Score from \"../Components/Score\";\nimport Solution from \"../Components/Solution\";\nimport { FaSyncAlt } from \"react-icons/fa\"; // Import the refresh icon\nimport \"../../Styles/DragAndDropQuiz.css\"; // Import the CSS file for styling\n\n// Function to shuffle an array randomly (Fisher-Yates Algorithm)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  let shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n};\nconst DragAndDropQuiz1 = () => {\n  _s();\n  var _quizData$currentQues2;\n  const [showInstructions, setShowInstructions] = useState(true);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [userMatches, setUserMatches] = useState([]);\n  const [solutions, setSolutions] = useState(Array(quizData.length).fill([]));\n  const [showSolution, setShowSolution] = useState(false);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [placedItems, setPlacedItems] = useState({});\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\n\n  // Shuffle drop zones (definitions) when question changes\n  useEffect(() => {\n    if (quizData[currentQuestion]) {\n      setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\n    }\n  }, [currentQuestion]);\n  const handleDragStart = (e, term) => {\n    e.dataTransfer.setData(\"term\", term);\n  };\n  const handleDrop = (e, definition) => {\n    const draggedTerm = e.dataTransfer.getData(\"term\");\n    const isCorrect = draggedTerm === definition.match;\n    if (!placedItems[definition.text]) {\n      setUserMatches(prev => [...prev, {\n        term: draggedTerm,\n        correct: isCorrect,\n        correctMatch: definition.match\n      }]);\n      setPlacedItems(prev => ({\n        ...prev,\n        [definition.text]: draggedTerm\n      }));\n    }\n  };\n  const nextQuestion = () => {\n    setSolutions(prevSolutions => {\n      const updatedSolutions = [...prevSolutions];\n      updatedSolutions[currentQuestion] = [...userMatches];\n      return updatedSolutions;\n    });\n    const allCorrect = userMatches.length === quizData[currentQuestion].terms.length && userMatches.every(match => match.correct);\n    if (allCorrect) {\n      setScore(prev => prev + 1);\n    }\n    if (currentQuestion < quizData.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setUserMatches([]);\n      setPlacedItems({});\n    }\n  };\n  const handleSubmit = () => {\n    setSolutions(prevSolutions => {\n      const updatedSolutions = [...prevSolutions];\n      updatedSolutions[currentQuestion] = [...userMatches];\n      return updatedSolutions;\n    });\n    const allCorrect = userMatches.length === quizData[currentQuestion].terms.length && userMatches.every(match => match.correct);\n    if (allCorrect) {\n      setScore(prev => prev + 1);\n    }\n    setQuizCompleted(true);\n  };\n  const handleRefresh = () => {\n    var _quizData$currentQues;\n    // Reset only the states for the current question, keeping the current question index intact\n    setUserMatches([]); // Reset user matches for the current question\n    setPlacedItems({}); // Reset placed items for the current question\n    setShuffledDefinitions(shuffleArray((_quizData$currentQues = quizData[currentQuestion]) === null || _quizData$currentQues === void 0 ? void 0 : _quizData$currentQues.definitions)); // Re-shuffle definitions for the current question\n    setShowSolution(false); // Hide solution if it's visible\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: showSolution ? /*#__PURE__*/_jsxDEV(Solution, {\n      solutions: solutions,\n      totalQuestions: quizData.length,\n      closeSolution: () => setShowSolution(false),\n      quizData: quizData,\n      quizCompleted: quizCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"question-header\",\n        children: [\"Q\", currentQuestion + 1, \". \", (_quizData$currentQues2 = quizData[currentQuestion]) === null || _quizData$currentQues2 === void 0 ? void 0 : _quizData$currentQues2.question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drag-container\",\n          children: quizData[currentQuestion].terms.map((term, index) => !Object.values(placedItems).includes(term) && /*#__PURE__*/_jsxDEV(DragItem, {\n            term: term,\n            handleDragStart: handleDragStart\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"drop-container\",\n          children: shuffledDefinitions.map((definition, index) => /*#__PURE__*/_jsxDEV(DropZone, {\n            definition: definition,\n            handleDrop: handleDrop,\n            placedItem: placedItems[definition.text]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), !quizCompleted && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: currentQuestion < quizData.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextQuestion,\n          className: \"next-btn\",\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          className: \"btn btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 17\n        }, this)\n      }, void 0, false), quizCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: /*#__PURE__*/_jsxDEV(Score, {\n          score: score,\n          totalQuestions: quizData.length,\n          viewSolution: () => setShowSolution(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"refresh-container\",\n        children: /*#__PURE__*/_jsxDEV(FaSyncAlt, {\n          className: \"refresh-icon\",\n          onClick: handleRefresh\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n};\n_s(DragAndDropQuiz1, \"RB1IP+yEs3e7Cnk77dV+SPtJJUQ=\");\n_c = DragAndDropQuiz1;\nexport default DragAndDropQuiz1;\nvar _c;\n$RefreshReg$(_c, \"DragAndDropQuiz1\");","map":{"version":3,"names":["React","useState","useEffect","quizData","InstructionPage","DragItem","DropZone","Score","Solution","FaSyncAlt","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","shuffled","i","length","j","Math","floor","random","DragAndDropQuiz1","_s","_quizData$currentQues2","showInstructions","setShowInstructions","currentQuestion","setCurrentQuestion","score","setScore","userMatches","setUserMatches","solutions","setSolutions","Array","fill","showSolution","setShowSolution","quizCompleted","setQuizCompleted","placedItems","setPlacedItems","shuffledDefinitions","setShuffledDefinitions","definitions","handleDragStart","e","term","dataTransfer","setData","handleDrop","definition","draggedTerm","getData","isCorrect","match","text","prev","correct","correctMatch","nextQuestion","prevSolutions","updatedSolutions","allCorrect","terms","every","handleSubmit","handleRefresh","_quizData$currentQues","className","children","totalQuestions","closeSolution","fileName","_jsxFileName","lineNumber","columnNumber","question","map","index","Object","values","includes","placedItem","onClick","viewSolution","_c","$RefreshReg$"],"sources":["C:/Users/happy/Downloads/edzest-website-3/src/DragAndDropQuiz/Set1/DragAndDropQuiz1.js"],"sourcesContent":["\r\n\r\n\r\n\r\n// import { FaSyncAlt } from \"react-icons/fa\"; // Import refresh icon from react-icons\r\n// // import InstructionPage from \"../Components/InstructionPage\"; // Import the InstructionPage component\r\n// import DragItem from \"../Components/DragItem\"; // Import the DragItem component, which represents draggable items\r\n// import DropZone from \"../Components/DropZone\"; // Import the DropZone component, which represents areas where items can be dropped\r\n// import Score from \"../Components/Score\"; // Import the Score component to display the user's score\r\n// import Solution from \"../Components/Solution\"; // Import the Solution component to show correct answers\r\n// import quizData from \"./quizData\"; // Import quiz data (questions, terms, and definitions)\r\n// import { useState, useEffect } from \"react\"; // Import React hooks for managing state and side effects\r\n// import \"../../Styles/DragAndDropQuiz.css\"; // Import the CSS file for styling\r\n\r\n// // Function to shuffle an array using the Fisher-Yates algorithm\r\n// const shuffleArray = (array) => {\r\n//   let shuffled = [...array]; // Create a copy of the original array\r\n//   for (let i = shuffled.length - 1; i > 0; i--) {\r\n//     const j = Math.floor(Math.random() * (i + 1)); // Generate a random index\r\n//     [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]; // Swap elements\r\n//   }\r\n//   return shuffled; // Return the shuffled array\r\n// };\r\n\r\n// // Main component for the drag-and-drop quiz\r\n// const DragAndDropQuiz1 = () => {\r\n//   // State variables to manage quiz behavior\r\n//   // const [showInstructions, setShowInstructions] = useState(true); // Show/hide instructions\r\n//   const [currentQuestion, setCurrentQuestion] = useState(0); // Track the current question index\r\n//   const [score, setScore] = useState(0); // Track the user's score\r\n//   const [userMatches, setUserMatches] = useState({}); // Store user's matched answers\r\n//   const [solutions, setSolutions] = useState(Array(quizData.length).fill([])); // Store solutions for each question\r\n//   const [showSolution, setShowSolution] = useState(false); // Show/hide the solution modal\r\n//   const [quizCompleted, setQuizCompleted] = useState(false); // Track if the quiz is completed\r\n//   const [placedItems, setPlacedItems] = useState({}); // Track placed draggable items\r\n//   const [shuffledDefinitions, setShuffledDefinitions] = useState([]); // Store shuffled definitions for the current question\r\n\r\n//   // Effect to shuffle definitions whenever the question changes\r\n//   useEffect(() => {\r\n//     if (quizData[currentQuestion]) {\r\n//       setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\r\n//     }\r\n//   }, [currentQuestion]); // Runs whenever `currentQuestion` changes\r\n\r\n//   // Function to handle the start of a drag event\r\n//   const handleDragStart = (e, term) => {\r\n//     // e.dataTransfer.setData(\"term\", term); // Store the dragged term in the event data\r\n//     e.dataTransfer.setData(\"text/plain\", term);\r\n//   };\r\n\r\n//   // Function to handle when an item is dropped into a drop zone\r\n//   const handleDrop = (e, definition) => {\r\n//     const draggedTerm = e.dataTransfer.getData(\"term\"); // Retrieve the dragged term\r\n//     const isCorrect = draggedTerm === definition.match; // Check if the match is correct\r\n\r\n//     // Prevent overriding an already placed item\r\n//     if (!placedItems[currentQuestion]?.[definition.text]) {\r\n//       // Update user matches\r\n//       setUserMatches((prev) => ({\r\n//         ...prev,\r\n//         [currentQuestion]: [\r\n//           ...(prev[currentQuestion] || []),\r\n//           {\r\n//             term: draggedTerm,\r\n//             correct: isCorrect,\r\n//             correctMatch: definition.match,\r\n//           },\r\n//         ],\r\n//       }));\r\n\r\n//       // Store placed items to prevent reusing them\r\n//       setPlacedItems((prev) => ({\r\n//         ...prev,\r\n//         [currentQuestion]: {\r\n//           ...prev[currentQuestion],\r\n//           [definition.text]: draggedTerm,\r\n//         },\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   // Function to check and increase the score if all answers are correct\r\n//   const checkAndIncreaseScore = (questionIndex) => {\r\n//     const matches = userMatches[questionIndex] || [];\r\n//     if (\r\n//       matches.length === quizData[questionIndex].terms.length && // Check if all terms are matched\r\n//       matches.every((match) => match.correct) // Ensure all matches are correct\r\n//     ) {\r\n//       setScore((prev) => prev + 1); // Increment score\r\n//     }\r\n//   };\r\n\r\n//   // Function to proceed to the next question\r\n//   const nextQuestion = () => {\r\n//     // Save the user's answers before moving to the next question\r\n//     setSolutions((prevSolutions) => {\r\n//       const updatedSolutions = [...prevSolutions];\r\n//       updatedSolutions[currentQuestion] = [...(userMatches[currentQuestion] || [])];\r\n//       return updatedSolutions;\r\n//     });\r\n\r\n//     checkAndIncreaseScore(currentQuestion); // Check if the answer is correct and update the score\r\n\r\n//     if (currentQuestion < quizData.length - 1) {\r\n//       setCurrentQuestion((prev) => prev + 1); // Move to the next question\r\n//     }\r\n//   };\r\n\r\n//   // Function to submit the quiz\r\n//   const handleSubmit = () => {\r\n//     setSolutions((prevSolutions) => {\r\n//       const updatedSolutions = [...prevSolutions];\r\n//       updatedSolutions[currentQuestion] = [...(userMatches[currentQuestion] || [])];\r\n//       return updatedSolutions;\r\n//     });\r\n\r\n//     checkAndIncreaseScore(currentQuestion); // Update score\r\n//     setQuizCompleted(true); // Mark quiz as completed\r\n//   };\r\n\r\n//   // Function to refresh the current question\r\n//   const handleRefresh = () => {\r\n//     // Prevent refresh if no attempt was made\r\n//     if (!userMatches[currentQuestion] || userMatches[currentQuestion].length === 0) {\r\n//       return;\r\n//     }\r\n\r\n//     // Reset matches and placed items for the current question\r\n//     setUserMatches((prev) => ({\r\n//       ...prev,\r\n//       [currentQuestion]: [],\r\n//     }));\r\n//     setPlacedItems((prev) => ({\r\n//       ...prev,\r\n//       [currentQuestion]: {},\r\n//     }));\r\n\r\n//     // Reshuffle definitions\r\n//     setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"quiz-container\">\r\n//       {showSolution ? ( // If the solution is being viewed\r\n//         <Solution\r\n//           solutions={solutions}\r\n//           totalQuestions={quizData.length}\r\n//           closeSolution={() => setShowSolution(false)}\r\n//           quizData={quizData}\r\n//           quizCompleted={quizCompleted}\r\n//         />\r\n//       ) : (\r\n//         <>\r\n//           {/* Display the current question */}\r\n//           <div className=\"question-header\">\r\n//             <h2>\r\n//               Q{currentQuestion + 1}. {quizData[currentQuestion]?.question}\r\n//             </h2>\r\n//           </div>\r\n\r\n//           <div className=\"quiz-content\">\r\n//             {/* Container for draggable terms */}\r\n//             <div className=\"drag-container\">\r\n//               {quizData[currentQuestion].terms.map(\r\n//                 (term, index) =>\r\n//                   !(\r\n//                     placedItems[currentQuestion] &&\r\n//                     Object.values(placedItems[currentQuestion]).includes(term)\r\n//                   ) && (\r\n//                     <DragItem\r\n//                       key={index}\r\n//                       term={term}\r\n//                       handleDragStart={handleDragStart}\r\n//                     />\r\n//                   )\r\n//               )}\r\n//             </div>\r\n\r\n//             {/* Container for drop zones */}\r\n//             <div className=\"drop-container\">\r\n//               {shuffledDefinitions.map((definition, index) => (\r\n//                 <DropZone\r\n//                   key={index}\r\n//                   definition={definition}\r\n//                   handleDrop={handleDrop}\r\n//                   placedItem={placedItems[currentQuestion]?.[definition.text]}\r\n//                 />\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {!quizCompleted && (\r\n//             <>\r\n//               {/* Show \"Next\" button if there are more questions, otherwise show \"Submit\" */}\r\n//               {currentQuestion < quizData.length - 1 ? (\r\n//                 <button onClick={nextQuestion} className=\"next-btn\">\r\n//                   Next\r\n//                 </button>\r\n//               ) : (\r\n//                 <button onClick={handleSubmit} className=\"btn btn-primary\">\r\n//                   Submit\r\n//                 </button>\r\n//               )}\r\n//             </>\r\n//           )}\r\n\r\n//           {/* Display score after completing the quiz */}\r\n//           {quizCompleted && (\r\n//             <div className=\"score-container\">\r\n//               <Score\r\n//                 score={score}\r\n//                 totalQuestions={quizData.length}\r\n//                 viewSolution={() => setShowSolution(true)}\r\n//               />\r\n//             </div>\r\n//           )}\r\n          \r\n//           {/* Refresh button */}\r\n//           <div className=\"refresh-container\">\r\n//             <FaSyncAlt className=\"refresh-icon\" onClick={handleRefresh} />\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DragAndDropQuiz1;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport quizData from \"./quizData\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport InstructionPage from \"../Components/InstructionPage\";\r\nimport DragItem from \"../Components/DragItem\";\r\nimport DropZone from \"../Components/DropZone\";\r\nimport Score from \"../Components/Score\";\r\nimport Solution from \"../Components/Solution\";\r\nimport { FaSyncAlt } from \"react-icons/fa\"; // Import the refresh icon\r\nimport \"../../Styles/DragAndDropQuiz.css\"; // Import the CSS file for styling\r\n\r\n// Function to shuffle an array randomly (Fisher-Yates Algorithm)\r\nconst shuffleArray = (array) => {\r\n  let shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\nconst DragAndDropQuiz1 = () => {\r\n  const [showInstructions, setShowInstructions] = useState(true);\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [userMatches, setUserMatches] = useState([]);\r\n  const [solutions, setSolutions] = useState(Array(quizData.length).fill([]));\r\n  const [showSolution, setShowSolution] = useState(false);\r\n  const [quizCompleted, setQuizCompleted] = useState(false);\r\n  const [placedItems, setPlacedItems] = useState({});\r\n  const [shuffledDefinitions, setShuffledDefinitions] = useState([]);\r\n\r\n  // Shuffle drop zones (definitions) when question changes\r\n  useEffect(() => {\r\n    if (quizData[currentQuestion]) {\r\n      setShuffledDefinitions(shuffleArray(quizData[currentQuestion].definitions));\r\n    }\r\n  }, [currentQuestion]);\r\n\r\n  const handleDragStart = (e, term) => {\r\n    e.dataTransfer.setData(\"term\", term);\r\n  };\r\n\r\n  const handleDrop = (e, definition) => {\r\n    const draggedTerm = e.dataTransfer.getData(\"term\");\r\n    const isCorrect = draggedTerm === definition.match;\r\n\r\n    if (!placedItems[definition.text]) {\r\n      setUserMatches((prev) => [...prev, { term: draggedTerm, correct: isCorrect, correctMatch: definition.match }]);\r\n      setPlacedItems((prev) => ({ ...prev, [definition.text]: draggedTerm }));\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setSolutions((prevSolutions) => {\r\n      const updatedSolutions = [...prevSolutions];\r\n      updatedSolutions[currentQuestion] = [...userMatches];\r\n      return updatedSolutions;\r\n    });\r\n\r\n    const allCorrect =\r\n      userMatches.length === quizData[currentQuestion].terms.length &&\r\n      userMatches.every((match) => match.correct);\r\n\r\n    if (allCorrect) {\r\n      setScore((prev) => prev + 1);\r\n    }\r\n\r\n    if (currentQuestion < quizData.length - 1) {\r\n      setCurrentQuestion((prev) => prev + 1);\r\n      setUserMatches([]);\r\n      setPlacedItems({});\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    setSolutions((prevSolutions) => {\r\n      const updatedSolutions = [...prevSolutions];\r\n      updatedSolutions[currentQuestion] = [...userMatches];\r\n      return updatedSolutions;\r\n    });\r\n\r\n    const allCorrect =\r\n      userMatches.length === quizData[currentQuestion].terms.length &&\r\n      userMatches.every((match) => match.correct);\r\n\r\n    if (allCorrect) {\r\n      setScore((prev) => prev + 1);\r\n    }\r\n\r\n    setQuizCompleted(true);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    // Reset only the states for the current question, keeping the current question index intact\r\n    setUserMatches([]);  // Reset user matches for the current question\r\n    setPlacedItems({});   // Reset placed items for the current question\r\n    setShuffledDefinitions(shuffleArray(quizData[currentQuestion]?.definitions));  // Re-shuffle definitions for the current question\r\n    setShowSolution(false);  // Hide solution if it's visible\r\n  };\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {showSolution ? (\r\n        <Solution\r\n          solutions={solutions}\r\n          totalQuestions={quizData.length}\r\n          closeSolution={() => setShowSolution(false)}\r\n          quizData={quizData}\r\n          quizCompleted={quizCompleted}\r\n        />\r\n      ) : (\r\n        <>\r\n          <h2 className=\"question-header\">\r\n            Q{currentQuestion + 1}. {quizData[currentQuestion]?.question}\r\n          </h2>\r\n\r\n          <div className=\"quiz-content\">\r\n            <div className=\"drag-container\">\r\n              {quizData[currentQuestion].terms.map((term, index) => (\r\n                !Object.values(placedItems).includes(term) && (\r\n                  <DragItem key={index} term={term} handleDragStart={handleDragStart} />\r\n                )\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"drop-container\">\r\n              {shuffledDefinitions.map((definition, index) => (\r\n                <DropZone\r\n                  key={index}\r\n                  definition={definition}\r\n                  handleDrop={handleDrop}\r\n                  placedItem={placedItems[definition.text]}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {!quizCompleted && (\r\n            <>\r\n              \r\n\r\n              {currentQuestion < quizData.length - 1 ? (\r\n                <button onClick={nextQuestion} className=\"next-btn\">\r\n                  Next Question\r\n                </button>\r\n              ) : (\r\n                <button onClick={handleSubmit} className=\"btn btn-primary\">\r\n                  Submit\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n\r\n          {quizCompleted && (\r\n            <div className=\"score-container\">\r\n              <Score score={score} totalQuestions={quizData.length} viewSolution={() => setShowSolution(true)} />\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"refresh-container\">\r\n            <FaSyncAlt className=\"refresh-icon\" onClick={handleRefresh} />\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DragAndDropQuiz1;\r\n"],"mappings":";;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,sCAAsC;AAC7C,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,QAAQ,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}