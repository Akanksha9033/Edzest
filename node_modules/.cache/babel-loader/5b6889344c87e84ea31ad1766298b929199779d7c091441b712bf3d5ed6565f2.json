{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\happy\\\\Downloads\\\\edzest-website-3\\\\src\\\\components\\\\ProjectDocs\\\\ProjectSidebar.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\n// import useWindowSize from \"./useWindowSize\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\n//   const screenWidth = useWindowSize();\n//   const isMobile = screenWidth < 992;\n\n//   const [expandedChapters, setExpandedChapters] = useState({});\n//   const [selectedChapter, setSelectedChapter] = useState(null);\n//   const [selectedSection, setSelectedSection] = useState(null);\n//   const navigate = useNavigate(); // Initialize useNavigate\n\n//   const handleChapterClick = (chapter) => {\n//     setSelectedChapter(chapter);\n//     onSelectChapter(chapter.id);\n\n//     // Toggle expand/collapse state\n//     setExpandedChapters((prev) => ({\n//       ...prev,\n//       [chapter.id]: !prev[chapter.id],\n//     }));\n//   };\n\n//   const handleSectionClick = (chapter, section) => {\n//     console.log(\"Clicked Section:\", { chapter, section }); // ✅ Debugging Log\n\n//     setSelectedChapter(chapter);\n//     setSelectedSection(section);\n//     onSelectChapter(chapter.id);\n\n//     if (onSelectSection) {\n//       onSelectSection(section);\n//     }\n\n//     // ✅ Ensure URL updates correctly\n//     if (section.id) {\n//       navigate(`/docs/${chapter.id}/${section.id}`);\n//     } else {\n//       navigate(`/docs/${chapter.id}`);\n//     }\n\n//   };\n\n//   return (\n//     <>\n//       {!isMobile ? (\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\n//           <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\n//             {contentData.map((chapter) => (\n//               <div key={chapter.id}>\n//                 <ListGroup.Item\n//                   action\n//                   active={selectedChapter?.id === chapter.id}\n//                   onClick={() => handleChapterClick(chapter)}\n//                   style={{ cursor: \"pointer\" }}\n//                 >\n//                   {chapter.title}\n//                 </ListGroup.Item>\n\n//                 {expandedChapters[chapter.id] && chapter.sections && (\n//                   <ListGroup className=\"ms-3\">\n//                     {chapter.sections.map((section) => (\n//                       <ListGroup.Item\n//                         key={section.id}\n//                         action\n//                         active={selectedSection?.id === section.id}\n//                         onClick={() => handleSectionClick(chapter, section)}\n//                         style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\n//                       >\n//                         {section.title}\n//                       </ListGroup.Item>\n//                     ))}\n//                   </ListGroup>\n//                 )}\n//               </div>\n//             ))}\n//           </ListGroup>\n//         </Col>\n//       ) : (\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\n//           <Offcanvas.Body>\n//             <ListGroup>\n//               {contentData.map((chapter) => (\n//                 <div key={chapter.id}>\n//                   <ListGroup.Item action onClick={() => handleChapterClick(chapter)}>\n//                     {chapter.title}\n//                   </ListGroup.Item>\n//                   {expandedChapters[chapter.id] && chapter.sections && (\n//                     <ListGroup className=\"ms-3\">\n//                       {chapter.sections.map((section) => (\n//                         <ListGroup.Item\n//                           key={section.id}\n//                           action\n//                           active={selectedSection?.id === section.id}\n//                           onClick={() => handleSectionClick(chapter, section)}\n//                         >\n//                           {section.title}\n//                         </ListGroup.Item>\n//                       ))}\n//                     </ListGroup>\n//                   )}\n//                 </div>\n//               ))}\n//             </ListGroup>\n//           </Offcanvas.Body>\n//         </Offcanvas>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ProjectSidebar;\n\n// import React, { useState } from \"react\";\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\n// import { useNavigate } from \"react-router-dom\";\n// import useWindowSize from \"./useWindowSize\";\n\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\n//   const screenWidth = useWindowSize();\n//   const isMobile = screenWidth < 992;\n//   const navigate = useNavigate();\n\n//   const [expandedChapters, setExpandedChapters] = useState({});\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\n//   const [selectedChapter, setSelectedChapter] = useState(null);\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\n//   const [selectedSection, setSelectedSection] = useState(null);\n\n//   const handleChapterClick = (chapter) => {\n//     setSelectedChapter(chapter);\n//     onSelectChapter(chapter); // Pass entire chapter\n\n//     setExpandedChapters((prev) => ({\n//       ...prev,\n//       [chapter.id]: !prev[chapter.id],\n//     }));\n//   };\n\n//   const handleSubChapterClick = (chapter, subChapter) => {\n//     setSelectedSubChapter(subChapter);\n//     onSelectChapter(chapter); // Pass entire chapter\n//     onSelectSection(subChapter); // Ensure content updates\n\n//     setExpandedSubChapters((prev) => ({\n//       ...prev,\n//       [subChapter.id]: !prev[subChapter.id],\n//     }));\n//   };\n\n//   const handleSectionClick = (chapter, subChapter, section) => {\n//     setSelectedChapter(chapter);\n//     setSelectedSubChapter(subChapter);\n//     setSelectedSection(section);\n\n//     onSelectChapter(chapter); \n//     onSelectSection(section);\n\n//     // Ensure the navigation path is correctly formatted\n//     const formattedChapterId = chapter.id.toLowerCase();\n//     const formattedSubChapterId = subChapter.id.toLowerCase();\n//     const formattedSectionId = section.id.toLowerCase();\n\n//     navigate(`/docs/${formattedChapterId}/${formattedSubChapterId}/${formattedSectionId}`);\n//   };\n\n//   const renderChapters = () => {\n//     return (\n//       <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\n//         {contentData.map((chapter) => (\n//           <div key={chapter.id}>\n//             <ListGroup.Item\n//               action\n//               active={selectedChapter?.id === chapter.id}\n//               onClick={() => handleChapterClick(chapter)}\n//               style={{ cursor: \"pointer\" }}\n//             >\n//               {chapter.title}\n//             </ListGroup.Item>\n\n//             {expandedChapters[chapter.id] &&\n//               chapter.subChapters?.length > 0 && (\n//                 <ListGroup className=\"ms-3\">\n//                   {chapter.subChapters.map((subChapter) => (\n//                     <div key={subChapter.id}>\n//                       <ListGroup.Item\n//                         action\n//                         active={selectedSubChapter?.id === subChapter.id}\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\n//                         style={{ cursor: \"pointer\", fontWeight: \"500\" }}\n//                       >\n//                         {subChapter.title}\n//                       </ListGroup.Item>\n\n//                       {expandedSubChapters[subChapter.id] &&\n//                         subChapter.sections?.length > 0 && (\n//                           <ListGroup className=\"ms-3\">\n//                             {subChapter.sections.map((section) => (\n//                               <ListGroup.Item\n//                                 key={section.id}\n//                                 action\n//                                 active={selectedSection?.id === section.id}\n//                                 onClick={() => handleSectionClick(chapter, subChapter, section)}\n//                                 style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\n//                               >\n//                                 {section.title}\n//                               </ListGroup.Item>\n//                             ))}\n//                           </ListGroup>\n//                         )}\n//                     </div>\n//                   ))}\n//                 </ListGroup>\n//               )}\n//           </div>\n//         ))}\n//       </ListGroup>\n//     );\n//   };\n\n//   return (\n//     <>\n//       {!isMobile ? (\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\n//           {renderChapters()}\n//         </Col>\n//       ) : (\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\n//         </Offcanvas>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ProjectSidebar;\n\n// import React, { useState } from \"react\";\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\n// import { useNavigate } from \"react-router-dom\";\n// import useWindowSize from './useWindowSize'\n\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\n//   const screenWidth = useWindowSize();\n//   const isMobile = screenWidth < 992;\n//   const navigate = useNavigate();\n\n//   const [expandedChapters, setExpandedChapters] = useState({});\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\n\n//   const handleChapterClick = (chapter) => {\n//     onSelectChapter(chapter);\n//     setExpandedChapters((prev) => ({ ...prev, [chapter.id]: !prev[chapter.id] }));\n//   };\n\n//   const handleSubChapterClick = (chapter, subChapter) => {\n//     onSelectChapter(chapter);\n//     onSelectSection(subChapter);\n\n//     setExpandedSubChapters((prev) => ({ ...prev, [subChapter.id]: !prev[subChapter.id] }));\n//   };\n\n//   const handleSectionClick = (chapter, subChapter, section) => {\n//     onSelectChapter(chapter);\n//     onSelectSection(section);\n\n//     navigate(`/docs/${chapter.id.toLowerCase()}/${subChapter.id.toLowerCase()}/${section.id.toLowerCase()}`);\n//   };\n\n//   const renderChapters = () => (\n//     <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\n//       {contentData.map((chapter) => (\n//         <div key={chapter.id}>\n//           <ListGroup.Item action onClick={() => handleChapterClick(chapter)}>\n//             {chapter.title}\n//           </ListGroup.Item>\n\n//           {expandedChapters[chapter.id] &&\n//             chapter.subChapters?.map((subChapter) => (\n//               <div key={subChapter.id}>\n//                 <ListGroup.Item action onClick={() => handleSubChapterClick(chapter, subChapter)}>\n//                   {subChapter.title}\n//                 </ListGroup.Item>\n\n//                 {expandedSubChapters[subChapter.id] &&\n//                   subChapter.sections?.map((section) => (\n//                     <ListGroup.Item key={section.id} action onClick={() => handleSectionClick(chapter, subChapter, section)}>\n//                       {section.title}\n//                     </ListGroup.Item>\n//                   ))}\n//               </div>\n//             ))}\n//         </div>\n//       ))}\n//     </ListGroup>\n//   );\n\n//   return (\n//     <>\n//       {!isMobile ? (\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\n//           {renderChapters()}\n//         </Col>\n//       ) : (\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\n//         </Offcanvas>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ProjectSidebar;\n\n// import React, { useState } from \"react\";\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\n// import { useNavigate } from \"react-router-dom\";\n// import useWindowSize from \"./useWindowSize\";\n\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\n//   const screenWidth = useWindowSize();\n//   const isMobile = screenWidth < 992;\n//   const navigate = useNavigate();\n\n//   const [expandedChapters, setExpandedChapters] = useState({});\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\n//   const [selectedChapter, setSelectedChapter] = useState(null);\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\n//   const [selectedSection, setSelectedSection] = useState(null);\n\n//   const handleChapterClick = (chapter) => {\n//     setSelectedChapter(chapter);\n//     onSelectChapter(chapter); // Pass entire chapter\n\n//     setExpandedChapters((prev) => ({\n//       ...prev,\n//       [chapter.id]: !prev[chapter.id],\n//     }));\n//   };\n\n//   const handleSubChapterClick = (chapter, subChapter) => {\n//     setSelectedSubChapter(subChapter);\n//     onSelectChapter(chapter); // Pass entire chapter\n//     onSelectSection(subChapter); // Ensure content updates\n\n//     setExpandedSubChapters((prev) => ({\n//       ...prev,\n//       [subChapter.id]: !prev[subChapter.id],\n//     }));\n//   };\n\n//   const handleSectionClick = (chapter, subChapter, section) => {\n//   setSelectedChapter(chapter);\n//   setSelectedSubChapter(subChapter);\n//   setSelectedSection(section);\n\n//   onSelectChapter(chapter);\n//   onSelectSection(section);\n\n//   // ✅ Navigate to the new page\n//   const formattedChapterId = chapter.id.toLowerCase();\n//   const formattedSubChapterId = subChapter.id.toLowerCase();\n//   const formattedSectionId = section.id.toLowerCase();\n\n//   navigate(`/docs/${formattedChapterId}/${formattedSubChapterId}/${formattedSectionId}`);\n\n//   // ✅ Enable scrolling when clicking a sidebar item\n//   setTimeout(() => {\n//     const contentContainer = document.getElementById(\"content-scroll-container\");\n//     if (contentContainer) {\n//       contentContainer.scrollTop = 0; // Scroll to top when navigating\n//     }\n//   }, 100);\n// };\n\n//   const renderChapters = () => {\n//     return (\n//       <ListGroup className=\"overflow-auto w-100\" style={{ fontWeight: \"500\" }}>\n//         {contentData.map((chapter) => (\n//           <div key={chapter.id}>\n//             <ListGroup.Item\n//               action\n//               active={selectedChapter?.id === chapter.id}\n//               onClick={() => handleChapterClick(chapter)}\n//               style={{ cursor: \"pointer\" }}\n//             >\n//               {chapter.title}\n//             </ListGroup.Item>\n\n//             {expandedChapters[chapter.id] &&\n//               chapter.subChapters?.length > 0 && (\n//                 <ListGroup className=\"ms-3\">\n//                   {chapter.subChapters.map((subChapter) => (\n//                     <div key={subChapter.id}>\n//                       <ListGroup.Item\n//                         action\n//                         active={selectedSubChapter?.id === subChapter.id}\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\n//                         style={{ cursor: \"pointer\", fontWeight: \"500\" }}\n//                       >\n//                         {subChapter.title}\n//                       </ListGroup.Item>\n\n//                       {expandedSubChapters[subChapter.id] &&\n//                         subChapter.sections?.length > 0 && (\n//                           <ListGroup className=\"ms-3\">\n//                             {subChapter.sections.map((section) => (\n//                               <ListGroup.Item\n//                                 key={section.id}\n//                                 action\n//                                 active={selectedSection?.id === section.id}\n//                                 onClick={() => handleSectionClick(chapter, subChapter, section)}\n//                                 style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\n//                               >\n//                                 {section.title}\n//                               </ListGroup.Item>\n//                             ))}\n//                           </ListGroup>\n//                         )}\n//                     </div>\n//                   ))}\n//                 </ListGroup>\n//               )}\n//           </div>\n//         ))}\n//       </ListGroup>\n//     );\n//   };\n\n//   return (\n//     <>\n//       {!isMobile ? (\n//         <Col lg={12} md={4} className=\" sidebar pt-12 d-flex flex-column vh-100\" >\n//           {renderChapters()}\n//         </Col>\n//       ) : (\n//         <Offcanvas show={show} style={{ width: \"70%\" }} onHide={handleClose}>\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\n//         </Offcanvas>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ProjectSidebar;\n\n// import React, { useState } from \"react\";\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\n// import { useNavigate } from \"react-router-dom\";\n// import useWindowSize from \"./useWindowSize\";\n\n// const ProjectSidebar = ({\n//   show,\n//   handleClose,\n//   contentData,\n//   onSelectChapter,\n//   onSelectSubChapter,\n// }) => {\n//   const screenWidth = useWindowSize();\n//   const isMobile = screenWidth < 992;\n//   const navigate = useNavigate();\n\n//   const [expandedChapters, setExpandedChapters] = useState({});\n//   const [selectedChapter, setSelectedChapter] = useState(null);\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\n\n//   const handleChapterClick = (chapter) => {\n//     setSelectedChapter(chapter);\n//     onSelectChapter(chapter);\n\n//     // Expand/collapse chapters\n//     setExpandedChapters((prev) => ({\n//       ...prev,\n//       [chapter.id]: !prev[chapter.id],\n//     }));\n//   };\n\n//   const handleSubChapterClick = (chapter, subChapter) => {\n//     if (!subChapter) return;\n\n//     setSelectedSubChapter(subChapter);\n//     onSelectSubChapter(subChapter);\n\n//     // Navigate to the content URL\n//     navigate(`/content/${chapter.id}/${subChapter.id}`);\n//   };\n\n//   return (\n//     <>\n//       {!isMobile ? (\n//         <Col lg={12} md={4} className=\"sidebar vh-100 pt-3 d-flex flex-column\">\n//           <ListGroup className=\"overflow-auto w-100\">\n//             {contentData.map((chapter) => (\n//               <div key={chapter.id}>\n//                 {/* Chapter */}\n//                 <ListGroup.Item\n//                   action\n//                   active={selectedChapter?.id === chapter.id}\n//                   onClick={() => handleChapterClick(chapter)}\n//                   style={{ fontWeight: \"bold\" }}\n//                 >\n//                   {chapter.title}\n//                 </ListGroup.Item>\n\n//                 {/* SubChapters */}\n//                 {expandedChapters[chapter.id] && chapter.subChapters?.length > 0 && (\n//                   <ListGroup className=\"ms-3\">\n//                     {chapter.subChapters.map((subChapter) => (\n//                       <ListGroup.Item\n//                         key={subChapter.id}\n//                         action\n//                         active={selectedSubChapter?.id === subChapter.id}\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\n//                       >\n//                         {subChapter.title}\n//                       </ListGroup.Item>\n//                     ))}\n//                   </ListGroup>\n//                 )}\n//               </div>\n//             ))}\n//           </ListGroup>\n//         </Col>\n//       ) : (\n//         <Offcanvas show={show} style={{ width: \"70%\" }} onHide={handleClose}>\n//           <Offcanvas.Body>\n//             <ListGroup className=\"overflow-auto w-100\">\n//               {contentData.map((chapter) => (\n//                 <div key={chapter.id}>\n//                   {/* Chapter */}\n//                   <ListGroup.Item\n//                     action\n//                     active={selectedChapter?.id === chapter.id}\n//                     onClick={() => handleChapterClick(chapter)}\n//                   >\n//                     {chapter.title}\n//                   </ListGroup.Item>\n\n//                   {/* SubChapters */}\n//                   {expandedChapters[chapter.id] && chapter.subChapters?.length > 0 && (\n//                     <ListGroup className=\"ms-3\">\n//                       {chapter.subChapters.map((subChapter) => (\n//                         <ListGroup.Item\n//                           key={subChapter.id}\n//                           action\n//                           active={selectedSubChapter?.id === subChapter.id}\n//                           onClick={() => handleSubChapterClick(chapter, subChapter)}\n//                         >\n//                           {subChapter.title}\n//                         </ListGroup.Item>\n//                       ))}\n//                     </ListGroup>\n//                   )}\n//                 </div>\n//               ))}\n//             </ListGroup>\n//           </Offcanvas.Body>\n//         </Offcanvas>\n//       )}\n//     </>\n//   );\n// };\n\n// export default ProjectSidebar;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { ListGroup } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProjectSidebar = ({\n  contentData,\n  show,\n  handleClose\n}) => {\n  _s();\n  const {\n    chapterId,\n    subChapterId\n  } = useParams();\n  const [expandedChapter, setExpandedChapter] = useState(chapterId || null);\n  const sidebarRef = useRef(null);\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n\n  // Detect screen size changes\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  // Close sidebar when clicking outside (only on mobile)\n  useEffect(() => {\n    const handleOutsideClick = event => {\n      if (isMobile && show && sidebarRef.current && !sidebarRef.current.contains(event.target)) {\n        handleClose();\n      }\n    };\n    document.addEventListener(\"mousedown\", handleOutsideClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    };\n  }, [isMobile, show, handleClose]);\n\n  // Prevent rendering if sidebar is closed on mobile\n  if (isMobile && !show) return null;\n  const toggleChapter = id => {\n    setExpandedChapter(expandedChapter === id ? null : id);\n  };\n  const handleSubchapterClick = () => {\n    if (isMobile) {\n      handleClose(); // Close sidebar on mobile\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: sidebarRef,\n    className: `sidebar ${show ? \"show\" : \"\"} d-flex flex-column bg-light border-end vh-100 position-fixed`,\n    style: {\n      width: \"250px\",\n      left: \"0\",\n      top: \"100\",\n      maxHeight: \"80vh\",\n      overflowY: \"auto\",\n      paddingRight: \"10px\",\n      zIndex: \"1050\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ListGroup, {\n      className: \"fw-bold\",\n      children: contentData.map(chapter => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          action: true,\n          className: `chapter-title ${expandedChapter === chapter.id ? \"active\" : \"\"}bg-light fw-bold py-2 border-bottom`,\n          onClick: () => toggleChapter(chapter.id),\n          children: chapter.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }, this), expandedChapter === chapter.id && /*#__PURE__*/_jsxDEV(ListGroup, {\n          className: \"subchapter-list\",\n          children: chapter.subChapters.map(sub => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            as: Link,\n            to: `/docs/${chapter.id}/${sub.id}`,\n            action: true,\n            onClick: handleSubchapterClick // ✅ Closes sidebar only on mobile\n            ,\n            className: `subchapter-item text-secondary fs-6 ps-4 ${sub.id === subChapterId ? \"selected\" : \"\"}`,\n            children: sub.title\n          }, sub.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 15\n        }, this)]\n      }, chapter.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 629,\n    columnNumber: 5\n  }, this);\n};\n_s(ProjectSidebar, \"1aGn1fS1iDR79aZWni2VmzrVoN0=\", false, function () {\n  return [useParams];\n});\n_c = ProjectSidebar;\nexport default ProjectSidebar;\nvar _c;\n$RefreshReg$(_c, \"ProjectSidebar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useParams","ListGroup","jsxDEV","_jsxDEV","ProjectSidebar","contentData","show","handleClose","_s","chapterId","subChapterId","expandedChapter","setExpandedChapter","sidebarRef","isMobile","setIsMobile","window","innerWidth","handleResize","addEventListener","removeEventListener","handleOutsideClick","event","current","contains","target","document","toggleChapter","id","handleSubchapterClick","ref","className","style","width","left","top","maxHeight","overflowY","paddingRight","zIndex","children","map","chapter","Item","action","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","subChapters","sub","as","to","_c","$RefreshReg$"],"sources":["C:/Users/happy/Downloads/edzest-website-3/src/components/ProjectDocs/ProjectSidebar.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\r\n// import useWindowSize from \"./useWindowSize\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\r\n//   const screenWidth = useWindowSize();\r\n//   const isMobile = screenWidth < 992;\r\n\r\n//   const [expandedChapters, setExpandedChapters] = useState({});\r\n//   const [selectedChapter, setSelectedChapter] = useState(null);\r\n//   const [selectedSection, setSelectedSection] = useState(null);\r\n//   const navigate = useNavigate(); // Initialize useNavigate\r\n\r\n//   const handleChapterClick = (chapter) => {\r\n//     setSelectedChapter(chapter);\r\n//     onSelectChapter(chapter.id);\r\n\r\n//     // Toggle expand/collapse state\r\n//     setExpandedChapters((prev) => ({\r\n//       ...prev,\r\n//       [chapter.id]: !prev[chapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSectionClick = (chapter, section) => {\r\n//     console.log(\"Clicked Section:\", { chapter, section }); // ✅ Debugging Log\r\n  \r\n//     setSelectedChapter(chapter);\r\n//     setSelectedSection(section);\r\n//     onSelectChapter(chapter.id);\r\n  \r\n//     if (onSelectSection) {\r\n//       onSelectSection(section);\r\n//     }\r\n  \r\n//     // ✅ Ensure URL updates correctly\r\n//     if (section.id) {\r\n//       navigate(`/docs/${chapter.id}/${section.id}`);\r\n//     } else {\r\n//       navigate(`/docs/${chapter.id}`);\r\n//     }\r\n    \r\n//   };\r\n  \r\n//   return (\r\n//     <>\r\n//       {!isMobile ? (\r\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\r\n//           <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\r\n//             {contentData.map((chapter) => (\r\n//               <div key={chapter.id}>\r\n//                 <ListGroup.Item\r\n//                   action\r\n//                   active={selectedChapter?.id === chapter.id}\r\n//                   onClick={() => handleChapterClick(chapter)}\r\n//                   style={{ cursor: \"pointer\" }}\r\n//                 >\r\n//                   {chapter.title}\r\n//                 </ListGroup.Item>\r\n\r\n//                 {expandedChapters[chapter.id] && chapter.sections && (\r\n//                   <ListGroup className=\"ms-3\">\r\n//                     {chapter.sections.map((section) => (\r\n//                       <ListGroup.Item\r\n//                         key={section.id}\r\n//                         action\r\n//                         active={selectedSection?.id === section.id}\r\n//                         onClick={() => handleSectionClick(chapter, section)}\r\n//                         style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\r\n//                       >\r\n//                         {section.title}\r\n//                       </ListGroup.Item>\r\n//                     ))}\r\n//                   </ListGroup>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </ListGroup>\r\n//         </Col>\r\n//       ) : (\r\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\r\n//           <Offcanvas.Body>\r\n//             <ListGroup>\r\n//               {contentData.map((chapter) => (\r\n//                 <div key={chapter.id}>\r\n//                   <ListGroup.Item action onClick={() => handleChapterClick(chapter)}>\r\n//                     {chapter.title}\r\n//                   </ListGroup.Item>\r\n//                   {expandedChapters[chapter.id] && chapter.sections && (\r\n//                     <ListGroup className=\"ms-3\">\r\n//                       {chapter.sections.map((section) => (\r\n//                         <ListGroup.Item\r\n//                           key={section.id}\r\n//                           action\r\n//                           active={selectedSection?.id === section.id}\r\n//                           onClick={() => handleSectionClick(chapter, section)}\r\n//                         >\r\n//                           {section.title}\r\n//                         </ListGroup.Item>\r\n//                       ))}\r\n//                     </ListGroup>\r\n//                   )}\r\n//                 </div>\r\n//               ))}\r\n//             </ListGroup>\r\n//           </Offcanvas.Body>\r\n//         </Offcanvas>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ProjectSidebar;\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import useWindowSize from \"./useWindowSize\";\r\n\r\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\r\n//   const screenWidth = useWindowSize();\r\n//   const isMobile = screenWidth < 992;\r\n//   const navigate = useNavigate();\r\n\r\n//   const [expandedChapters, setExpandedChapters] = useState({});\r\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\r\n//   const [selectedChapter, setSelectedChapter] = useState(null);\r\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\r\n//   const [selectedSection, setSelectedSection] = useState(null);\r\n\r\n//   const handleChapterClick = (chapter) => {\r\n//     setSelectedChapter(chapter);\r\n//     onSelectChapter(chapter); // Pass entire chapter\r\n\r\n//     setExpandedChapters((prev) => ({\r\n//       ...prev,\r\n//       [chapter.id]: !prev[chapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSubChapterClick = (chapter, subChapter) => {\r\n//     setSelectedSubChapter(subChapter);\r\n//     onSelectChapter(chapter); // Pass entire chapter\r\n//     onSelectSection(subChapter); // Ensure content updates\r\n\r\n//     setExpandedSubChapters((prev) => ({\r\n//       ...prev,\r\n//       [subChapter.id]: !prev[subChapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSectionClick = (chapter, subChapter, section) => {\r\n//     setSelectedChapter(chapter);\r\n//     setSelectedSubChapter(subChapter);\r\n//     setSelectedSection(section);\r\n  \r\n//     onSelectChapter(chapter); \r\n//     onSelectSection(section);\r\n  \r\n//     // Ensure the navigation path is correctly formatted\r\n//     const formattedChapterId = chapter.id.toLowerCase();\r\n//     const formattedSubChapterId = subChapter.id.toLowerCase();\r\n//     const formattedSectionId = section.id.toLowerCase();\r\n  \r\n//     navigate(`/docs/${formattedChapterId}/${formattedSubChapterId}/${formattedSectionId}`);\r\n//   };\r\n  \r\n  \r\n\r\n//   const renderChapters = () => {\r\n//     return (\r\n//       <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\r\n//         {contentData.map((chapter) => (\r\n//           <div key={chapter.id}>\r\n//             <ListGroup.Item\r\n//               action\r\n//               active={selectedChapter?.id === chapter.id}\r\n//               onClick={() => handleChapterClick(chapter)}\r\n//               style={{ cursor: \"pointer\" }}\r\n//             >\r\n//               {chapter.title}\r\n//             </ListGroup.Item>\r\n\r\n//             {expandedChapters[chapter.id] &&\r\n//               chapter.subChapters?.length > 0 && (\r\n//                 <ListGroup className=\"ms-3\">\r\n//                   {chapter.subChapters.map((subChapter) => (\r\n//                     <div key={subChapter.id}>\r\n//                       <ListGroup.Item\r\n//                         action\r\n//                         active={selectedSubChapter?.id === subChapter.id}\r\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\r\n//                         style={{ cursor: \"pointer\", fontWeight: \"500\" }}\r\n//                       >\r\n//                         {subChapter.title}\r\n//                       </ListGroup.Item>\r\n\r\n//                       {expandedSubChapters[subChapter.id] &&\r\n//                         subChapter.sections?.length > 0 && (\r\n//                           <ListGroup className=\"ms-3\">\r\n//                             {subChapter.sections.map((section) => (\r\n//                               <ListGroup.Item\r\n//                                 key={section.id}\r\n//                                 action\r\n//                                 active={selectedSection?.id === section.id}\r\n//                                 onClick={() => handleSectionClick(chapter, subChapter, section)}\r\n//                                 style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\r\n//                               >\r\n//                                 {section.title}\r\n//                               </ListGroup.Item>\r\n//                             ))}\r\n//                           </ListGroup>\r\n//                         )}\r\n//                     </div>\r\n//                   ))}\r\n//                 </ListGroup>\r\n//               )}\r\n//           </div>\r\n//         ))}\r\n//       </ListGroup>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {!isMobile ? (\r\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\r\n//           {renderChapters()}\r\n//         </Col>\r\n//       ) : (\r\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\r\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\r\n//         </Offcanvas>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ProjectSidebar;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import useWindowSize from './useWindowSize'\r\n\r\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\r\n//   const screenWidth = useWindowSize();\r\n//   const isMobile = screenWidth < 992;\r\n//   const navigate = useNavigate();\r\n\r\n//   const [expandedChapters, setExpandedChapters] = useState({});\r\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\r\n\r\n//   const handleChapterClick = (chapter) => {\r\n//     onSelectChapter(chapter);\r\n//     setExpandedChapters((prev) => ({ ...prev, [chapter.id]: !prev[chapter.id] }));\r\n//   };\r\n\r\n//   const handleSubChapterClick = (chapter, subChapter) => {\r\n//     onSelectChapter(chapter);\r\n//     onSelectSection(subChapter);\r\n\r\n//     setExpandedSubChapters((prev) => ({ ...prev, [subChapter.id]: !prev[subChapter.id] }));\r\n//   };\r\n\r\n//   const handleSectionClick = (chapter, subChapter, section) => {\r\n//     onSelectChapter(chapter);\r\n//     onSelectSection(section);\r\n\r\n//     navigate(`/docs/${chapter.id.toLowerCase()}/${subChapter.id.toLowerCase()}/${section.id.toLowerCase()}`);\r\n//   };\r\n\r\n//   const renderChapters = () => (\r\n//     <ListGroup className=\"overflow-auto\" style={{ fontWeight: \"500\" }}>\r\n//       {contentData.map((chapter) => (\r\n//         <div key={chapter.id}>\r\n//           <ListGroup.Item action onClick={() => handleChapterClick(chapter)}>\r\n//             {chapter.title}\r\n//           </ListGroup.Item>\r\n\r\n//           {expandedChapters[chapter.id] &&\r\n//             chapter.subChapters?.map((subChapter) => (\r\n//               <div key={subChapter.id}>\r\n//                 <ListGroup.Item action onClick={() => handleSubChapterClick(chapter, subChapter)}>\r\n//                   {subChapter.title}\r\n//                 </ListGroup.Item>\r\n\r\n//                 {expandedSubChapters[subChapter.id] &&\r\n//                   subChapter.sections?.map((section) => (\r\n//                     <ListGroup.Item key={section.id} action onClick={() => handleSectionClick(chapter, subChapter, section)}>\r\n//                       {section.title}\r\n//                     </ListGroup.Item>\r\n//                   ))}\r\n//               </div>\r\n//             ))}\r\n//         </div>\r\n//       ))}\r\n//     </ListGroup>\r\n//   );\r\n\r\n//   return (\r\n//     <>\r\n//       {!isMobile ? (\r\n//         <Col lg={3} md={4} className=\"border-end sidebar pt-6 d-flex flex-column vh-100\">\r\n//           {renderChapters()}\r\n//         </Col>\r\n//       ) : (\r\n//         <Offcanvas show={show} style={{ width: \"80%\" }} onHide={handleClose}>\r\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\r\n//         </Offcanvas>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ProjectSidebar;\r\n\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import useWindowSize from \"./useWindowSize\";\r\n\r\n// const ProjectSidebar = ({ show, handleClose, contentData, onSelectChapter, onSelectSection }) => {\r\n//   const screenWidth = useWindowSize();\r\n//   const isMobile = screenWidth < 992;\r\n//   const navigate = useNavigate();\r\n\r\n//   const [expandedChapters, setExpandedChapters] = useState({});\r\n//   const [expandedSubChapters, setExpandedSubChapters] = useState({});\r\n//   const [selectedChapter, setSelectedChapter] = useState(null);\r\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\r\n//   const [selectedSection, setSelectedSection] = useState(null);\r\n\r\n//   const handleChapterClick = (chapter) => {\r\n//     setSelectedChapter(chapter);\r\n//     onSelectChapter(chapter); // Pass entire chapter\r\n\r\n//     setExpandedChapters((prev) => ({\r\n//       ...prev,\r\n//       [chapter.id]: !prev[chapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSubChapterClick = (chapter, subChapter) => {\r\n//     setSelectedSubChapter(subChapter);\r\n//     onSelectChapter(chapter); // Pass entire chapter\r\n//     onSelectSection(subChapter); // Ensure content updates\r\n\r\n//     setExpandedSubChapters((prev) => ({\r\n//       ...prev,\r\n//       [subChapter.id]: !prev[subChapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSectionClick = (chapter, subChapter, section) => {\r\n//   setSelectedChapter(chapter);\r\n//   setSelectedSubChapter(subChapter);\r\n//   setSelectedSection(section);\r\n\r\n//   onSelectChapter(chapter);\r\n//   onSelectSection(section);\r\n\r\n//   // ✅ Navigate to the new page\r\n//   const formattedChapterId = chapter.id.toLowerCase();\r\n//   const formattedSubChapterId = subChapter.id.toLowerCase();\r\n//   const formattedSectionId = section.id.toLowerCase();\r\n\r\n//   navigate(`/docs/${formattedChapterId}/${formattedSubChapterId}/${formattedSectionId}`);\r\n  \r\n//   // ✅ Enable scrolling when clicking a sidebar item\r\n//   setTimeout(() => {\r\n//     const contentContainer = document.getElementById(\"content-scroll-container\");\r\n//     if (contentContainer) {\r\n//       contentContainer.scrollTop = 0; // Scroll to top when navigating\r\n//     }\r\n//   }, 100);\r\n// };\r\n  \r\n\r\n//   const renderChapters = () => {\r\n//     return (\r\n//       <ListGroup className=\"overflow-auto w-100\" style={{ fontWeight: \"500\" }}>\r\n//         {contentData.map((chapter) => (\r\n//           <div key={chapter.id}>\r\n//             <ListGroup.Item\r\n//               action\r\n//               active={selectedChapter?.id === chapter.id}\r\n//               onClick={() => handleChapterClick(chapter)}\r\n//               style={{ cursor: \"pointer\" }}\r\n//             >\r\n//               {chapter.title}\r\n//             </ListGroup.Item>\r\n\r\n//             {expandedChapters[chapter.id] &&\r\n//               chapter.subChapters?.length > 0 && (\r\n//                 <ListGroup className=\"ms-3\">\r\n//                   {chapter.subChapters.map((subChapter) => (\r\n//                     <div key={subChapter.id}>\r\n//                       <ListGroup.Item\r\n//                         action\r\n//                         active={selectedSubChapter?.id === subChapter.id}\r\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\r\n//                         style={{ cursor: \"pointer\", fontWeight: \"500\" }}\r\n//                       >\r\n//                         {subChapter.title}\r\n//                       </ListGroup.Item>\r\n\r\n//                       {expandedSubChapters[subChapter.id] &&\r\n//                         subChapter.sections?.length > 0 && (\r\n//                           <ListGroup className=\"ms-3\">\r\n//                             {subChapter.sections.map((section) => (\r\n//                               <ListGroup.Item\r\n//                                 key={section.id}\r\n//                                 action\r\n//                                 active={selectedSection?.id === section.id}\r\n//                                 onClick={() => handleSectionClick(chapter, subChapter, section)}\r\n//                                 style={{ fontSize: \"14px\", paddingLeft: \"20px\" }}\r\n//                               >\r\n//                                 {section.title}\r\n//                               </ListGroup.Item>\r\n//                             ))}\r\n//                           </ListGroup>\r\n//                         )}\r\n//                     </div>\r\n//                   ))}\r\n//                 </ListGroup>\r\n//               )}\r\n//           </div>\r\n//         ))}\r\n//       </ListGroup>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {!isMobile ? (\r\n//         <Col lg={12} md={4} className=\" sidebar pt-12 d-flex flex-column vh-100\" >\r\n//           {renderChapters()}\r\n//         </Col>\r\n//       ) : (\r\n//         <Offcanvas show={show} style={{ width: \"70%\" }} onHide={handleClose}>\r\n//           <Offcanvas.Body>{renderChapters()}</Offcanvas.Body>\r\n//         </Offcanvas>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ProjectSidebar;\r\n\r\n\r\n// import React, { useState } from \"react\";\r\n// import { ListGroup, Offcanvas, Col } from \"react-bootstrap\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import useWindowSize from \"./useWindowSize\";\r\n\r\n// const ProjectSidebar = ({\r\n//   show,\r\n//   handleClose,\r\n//   contentData,\r\n//   onSelectChapter,\r\n//   onSelectSubChapter,\r\n// }) => {\r\n//   const screenWidth = useWindowSize();\r\n//   const isMobile = screenWidth < 992;\r\n//   const navigate = useNavigate();\r\n\r\n//   const [expandedChapters, setExpandedChapters] = useState({});\r\n//   const [selectedChapter, setSelectedChapter] = useState(null);\r\n//   const [selectedSubChapter, setSelectedSubChapter] = useState(null);\r\n\r\n//   const handleChapterClick = (chapter) => {\r\n//     setSelectedChapter(chapter);\r\n//     onSelectChapter(chapter);\r\n\r\n//     // Expand/collapse chapters\r\n//     setExpandedChapters((prev) => ({\r\n//       ...prev,\r\n//       [chapter.id]: !prev[chapter.id],\r\n//     }));\r\n//   };\r\n\r\n//   const handleSubChapterClick = (chapter, subChapter) => {\r\n//     if (!subChapter) return;\r\n\r\n//     setSelectedSubChapter(subChapter);\r\n//     onSelectSubChapter(subChapter);\r\n\r\n//     // Navigate to the content URL\r\n//     navigate(`/content/${chapter.id}/${subChapter.id}`);\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       {!isMobile ? (\r\n//         <Col lg={12} md={4} className=\"sidebar vh-100 pt-3 d-flex flex-column\">\r\n//           <ListGroup className=\"overflow-auto w-100\">\r\n//             {contentData.map((chapter) => (\r\n//               <div key={chapter.id}>\r\n//                 {/* Chapter */}\r\n//                 <ListGroup.Item\r\n//                   action\r\n//                   active={selectedChapter?.id === chapter.id}\r\n//                   onClick={() => handleChapterClick(chapter)}\r\n//                   style={{ fontWeight: \"bold\" }}\r\n//                 >\r\n//                   {chapter.title}\r\n//                 </ListGroup.Item>\r\n\r\n//                 {/* SubChapters */}\r\n//                 {expandedChapters[chapter.id] && chapter.subChapters?.length > 0 && (\r\n//                   <ListGroup className=\"ms-3\">\r\n//                     {chapter.subChapters.map((subChapter) => (\r\n//                       <ListGroup.Item\r\n//                         key={subChapter.id}\r\n//                         action\r\n//                         active={selectedSubChapter?.id === subChapter.id}\r\n//                         onClick={() => handleSubChapterClick(chapter, subChapter)}\r\n//                       >\r\n//                         {subChapter.title}\r\n//                       </ListGroup.Item>\r\n//                     ))}\r\n//                   </ListGroup>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </ListGroup>\r\n//         </Col>\r\n//       ) : (\r\n//         <Offcanvas show={show} style={{ width: \"70%\" }} onHide={handleClose}>\r\n//           <Offcanvas.Body>\r\n//             <ListGroup className=\"overflow-auto w-100\">\r\n//               {contentData.map((chapter) => (\r\n//                 <div key={chapter.id}>\r\n//                   {/* Chapter */}\r\n//                   <ListGroup.Item\r\n//                     action\r\n//                     active={selectedChapter?.id === chapter.id}\r\n//                     onClick={() => handleChapterClick(chapter)}\r\n//                   >\r\n//                     {chapter.title}\r\n//                   </ListGroup.Item>\r\n\r\n//                   {/* SubChapters */}\r\n//                   {expandedChapters[chapter.id] && chapter.subChapters?.length > 0 && (\r\n//                     <ListGroup className=\"ms-3\">\r\n//                       {chapter.subChapters.map((subChapter) => (\r\n//                         <ListGroup.Item\r\n//                           key={subChapter.id}\r\n//                           action\r\n//                           active={selectedSubChapter?.id === subChapter.id}\r\n//                           onClick={() => handleSubChapterClick(chapter, subChapter)}\r\n//                         >\r\n//                           {subChapter.title}\r\n//                         </ListGroup.Item>\r\n//                       ))}\r\n//                     </ListGroup>\r\n//                   )}\r\n//                 </div>\r\n//               ))}\r\n//             </ListGroup>\r\n//           </Offcanvas.Body>\r\n//         </Offcanvas>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default ProjectSidebar;\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\n\r\nconst ProjectSidebar = ({ contentData, show, handleClose }) => {\r\n  const { chapterId, subChapterId } = useParams();\r\n  const [expandedChapter, setExpandedChapter] = useState(chapterId || null);\r\n  const sidebarRef = useRef(null);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n\r\n  // Detect screen size changes\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsMobile(window.innerWidth <= 768);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  // Close sidebar when clicking outside (only on mobile)\r\n  useEffect(() => {\r\n    const handleOutsideClick = (event) => {\r\n      if (isMobile && show && sidebarRef.current && !sidebarRef.current.contains(event.target)) {\r\n        handleClose();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleOutsideClick);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\r\n    };\r\n  }, [isMobile, show, handleClose]);\r\n\r\n  // Prevent rendering if sidebar is closed on mobile\r\n  if (isMobile && !show) return null;\r\n\r\n  const toggleChapter = (id) => {\r\n    setExpandedChapter(expandedChapter === id ? null : id);\r\n  };\r\n\r\n  const handleSubchapterClick = () => {\r\n    if (isMobile) {\r\n      handleClose(); // Close sidebar on mobile\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={sidebarRef}\r\n      className={`sidebar ${show ? \"show\" : \"\"} d-flex flex-column bg-light border-end vh-100 position-fixed`}\r\n      style={{\r\n        width: \"250px\",\r\n        left: \"0\",\r\n        top: \"100\",\r\n        maxHeight: \"80vh\",\r\n        overflowY: \"auto\",\r\n        paddingRight: \"10px\",\r\n        zIndex: \"1050\",\r\n      }}\r\n    >\r\n      <ListGroup className=\"fw-bold\">\r\n        {contentData.map((chapter) => (\r\n          <div key={chapter.id}>\r\n            {/* Chapter Title - Expandable */}\r\n            <ListGroup.Item\r\n              action\r\n              className={`chapter-title ${expandedChapter === chapter.id ? \"active\" : \"\"}bg-light fw-bold py-2 border-bottom`}\r\n              onClick={() => toggleChapter(chapter.id)}\r\n            >\r\n              {chapter.title}\r\n            </ListGroup.Item>\r\n\r\n            {/* Subchapters - Show if chapter is expanded */}\r\n            {expandedChapter === chapter.id && (\r\n              <ListGroup className=\"subchapter-list\">\r\n                {chapter.subChapters.map((sub) => (\r\n                  <ListGroup.Item\r\n                    as={Link}\r\n                    to={`/docs/${chapter.id}/${sub.id}`}\r\n                    key={sub.id}\r\n                    action\r\n                    onClick={handleSubchapterClick} // ✅ Closes sidebar only on mobile\r\n                    className={`subchapter-item text-secondary fs-6 ps-4 ${sub.id === subChapterId ? \"selected\" : \"\"}`}\r\n                  >\r\n                    {sub.title}\r\n                  </ListGroup.Item>\r\n                ))}\r\n              </ListGroup>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n};\r\nexport default ProjectSidebar;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}