{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\happy\\\\Downloads\\\\edzest-website-3\\\\src\\\\DragAndDropQuiz\\\\Components\\\\DropZone.js\";\n// // DropZone component that acts as a drop area for drag-and-drop functionality\n// const DropZone = ({ definition, handleDrop, placedItem, isAllDropped }) => {\n//   return (\n//     <div\n//       className={`drop-zone ${isAllDropped ? \"center-drop\" : \"\"}`} // Adds the 'center-drop' class if all items are dropped\n//       onDragOver={(e) => e.preventDefault()} // Prevents the default behavior to allow dragging over this area\n//       onDrop={(e) => handleDrop(e, definition)} // Calls handleDrop function when an item is dropped\n//     >\n//       {/* Displays the placed item if available; otherwise, shows the default definition text */}\n//       <span className=\"drop-text\">{placedItem || definition.text}</span>\n//     </div>\n//   );\n// };\n\n// export default DropZone; // Exporting the DropZone component for use in other parts of the app\n\n// DropZone component that acts as a drop area for drag-and-drop functionality\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropZone = ({\n  definition,\n  handleDrop,\n  placedItem,\n  isAllDropped\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `drop-zone ${isAllDropped ? \"center-drop\" : \"\"}` // Adds the 'center-drop' class if all items are dropped\n    ,\n    onDragOver: e => {\n      e.preventDefault(); // Prevents default behavior to allow dragging over this area\n      e.dataTransfer.dropEffect = \"move\"; // Ensures proper drop behavior\n    },\n    onDrop: e => {\n      const draggedTerm = e.dataTransfer.getData(\"text/plain\"); // Retrieve data using \"text/plain\" MIME type\n      handleDrop(e, definition, draggedTerm); // Calls handleDrop function when an item is dropped\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"drop-text\",\n      children: placedItem || definition.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = DropZone;\nexport default DropZone; // Exporting the DropZone component for use in other parts of the app\nvar _c;\n$RefreshReg$(_c, \"DropZone\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DropZone","definition","handleDrop","placedItem","isAllDropped","className","onDragOver","e","preventDefault","dataTransfer","dropEffect","onDrop","draggedTerm","getData","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/happy/Downloads/edzest-website-3/src/DragAndDropQuiz/Components/DropZone.js"],"sourcesContent":["\r\n\r\n// // DropZone component that acts as a drop area for drag-and-drop functionality\r\n// const DropZone = ({ definition, handleDrop, placedItem, isAllDropped }) => {\r\n//   return (\r\n//     <div\r\n//       className={`drop-zone ${isAllDropped ? \"center-drop\" : \"\"}`} // Adds the 'center-drop' class if all items are dropped\r\n//       onDragOver={(e) => e.preventDefault()} // Prevents the default behavior to allow dragging over this area\r\n//       onDrop={(e) => handleDrop(e, definition)} // Calls handleDrop function when an item is dropped\r\n//     >\r\n//       {/* Displays the placed item if available; otherwise, shows the default definition text */}\r\n//       <span className=\"drop-text\">{placedItem || definition.text}</span>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DropZone; // Exporting the DropZone component for use in other parts of the app\r\n\r\n\r\n\r\n// DropZone component that acts as a drop area for drag-and-drop functionality\r\nimport React from 'react'\r\nconst DropZone = ({ definition, handleDrop, placedItem, isAllDropped }) => {\r\n  return (\r\n    <div\r\n      className={`drop-zone ${isAllDropped ? \"center-drop\" : \"\"}`} // Adds the 'center-drop' class if all items are dropped\r\n      onDragOver={(e) => {\r\n        e.preventDefault(); // Prevents default behavior to allow dragging over this area\r\n        e.dataTransfer.dropEffect = \"move\"; // Ensures proper drop behavior\r\n      }}\r\n      onDrop={(e) => {\r\n        const draggedTerm = e.dataTransfer.getData(\"text/plain\"); // Retrieve data using \"text/plain\" MIME type\r\n        handleDrop(e, definition, draggedTerm); // Calls handleDrop function when an item is dropped\r\n      }}\r\n    >\r\n      {/* Displays the placed item if available; otherwise, shows the default definition text */}\r\n      <span className=\"drop-text\">{placedItem || definition.text}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropZone; // Exporting the DropZone component for use in other parts of the app\r\n"],"mappings":";AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACzB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,UAAU;EAAEC,UAAU;EAAEC,UAAU;EAAEC;AAAa,CAAC,KAAK;EACzE,oBACEL,OAAA;IACEM,SAAS,EAAE,aAAaD,YAAY,GAAG,aAAa,GAAG,EAAE,EAAG,CAAC;IAAA;IAC7DE,UAAU,EAAGC,CAAC,IAAK;MACjBA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;MACpBD,CAAC,CAACE,YAAY,CAACC,UAAU,GAAG,MAAM,CAAC,CAAC;IACtC,CAAE;IACFC,MAAM,EAAGJ,CAAC,IAAK;MACb,MAAMK,WAAW,GAAGL,CAAC,CAACE,YAAY,CAACI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;MAC1DX,UAAU,CAACK,CAAC,EAAEN,UAAU,EAAEW,WAAW,CAAC,CAAC,CAAC;IAC1C,CAAE;IAAAE,QAAA,eAGFf,OAAA;MAAMM,SAAS,EAAC,WAAW;MAAAS,QAAA,EAAEX,UAAU,IAAIF,UAAU,CAACc;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV,CAAC;AAACC,EAAA,GAjBIpB,QAAQ;AAmBd,eAAeA,QAAQ,CAAC,CAAC;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}