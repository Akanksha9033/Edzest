{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\happy\\\\Downloads\\\\edzest-website-3\\\\src\\\\DragAndDropQuiz\\\\Components\\\\Solution.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\n// // Solution component displays the user's attempts and correct answers for the quiz\n// const Solution = ({\n//   solutions,\n//   closeSolution,\n//   totalQuestions,\n//   quizData,\n//   quizCompleted,\n// }) => {\n//   const [currentSolutionIndex, setCurrentSolutionIndex] = useState(0); // Tracks the current question index\n//   const navigate = useNavigate(); // Hook for navigation\n\n//   // Function to move to the next solution (question)\n//   const nextSolution = () => {\n//     if (currentSolutionIndex < totalQuestions - 1) {\n//       setCurrentSolutionIndex((prev) => prev + 1);\n//       window.scrollTo(0, 0); // ✅ Scrolls to the top smoothly\n//     }\n//   };\n\n//   // Function to move to the previous solution (question)\n//   const prevSolution = () => {\n//     if (currentSolutionIndex > 0) {\n//       setCurrentSolutionIndex((prev) => prev - 1);\n//       window.scrollTo({ top: 0, behavior: \"smooth\" }); // ✅ Scrolls to the top smoothly\n//     }\n//   };\n\n//   // ✅ Scrolls to the top when the \"View Solution\" button is clicked\n//   const handleViewSolution = () => {\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\n//   };\n\n//   const currentQuestion = quizData?.[currentSolutionIndex]; // Retrieves the current question data\n\n//   return (\n//     <div className=\"solution-container\">\n//       {/* Section displaying the user's attempt for the current question */}\n//       <div className=\"your-attempt-box\">\n//         <h2>Q{currentSolutionIndex + 1}. Your Attempt</h2>\n\n//         {/* Checking if the user attempted the question */}\n//         {Array.isArray(solutions[currentSolutionIndex]) &&\n//         solutions[currentSolutionIndex].length > 0 ? (\n//           <div className=\"your-attempt-list\">\n//             {solutions[currentSolutionIndex].map((sol, index) => {\n//               // Finding the matched definition text\n//               const matchedDefinition =\n//                 currentQuestion.definitions.find(\n//                   (def) => def.match === sol.correctMatch\n//                 )?.text || \"Unknown\";\n\n//               return (\n//                 <div\n//                   key={index}\n//                   className={`your-attempt-row ${\n//                     sol.correct ? \"correct-attempt\" : \"incorrect-attempt\"\n//                   }`}\n//                 >\n//                   <span className=\"serial-number\">{index + 1}.</span>\n//                   <div className=\"term-box\">{sol.term}</div>\n//                   <div className=\"arrow\">→</div>\n//                   <div className=\"definition-box\">\n//                     {matchedDefinition}\n//                     <span className=\"match-symbol\">\n//                       {sol.correct ? \" ✅\" : \" ❌\"}\n//                     </span>\n//                   </div>\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         ) : (\n//           <p>❌ Not Attempted</p> // If the user did not attempt this question\n//         )}\n//       </div>\n\n//       {/* Section displaying the correct answers */}\n//       {quizCompleted && currentQuestion && (\n//         <div className=\"correct-matches-box\">\n//           <h3>Correct Matches:</h3>\n//           <div className=\"correct-matches-list\">\n//             {currentQuestion.definitions.map((definition, index) => (\n//               <div key={index} className=\"correct-match-row\">\n//                 <div className=\"term-box\">{definition.match}</div>\n//                 <div className=\"arrow\">→</div>\n//                 <div className=\"definition-box\">{definition.text}</div>\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Navigation buttons for the solutions */}\n//       <div className=\"solution-buttons-container\">\n//         <button onClick={prevSolution} disabled={currentSolutionIndex === 0}>\n//           Previous\n//         </button>\n//         <button\n//           onClick={nextSolution}\n//           disabled={currentSolutionIndex === totalQuestions - 1}\n//         >\n//           Next\n//         </button>\n//         {/* Redirecting user back to the drag-and-drop quiz screen when closing the solution */}\n//         <button onClick={() => navigate(\"/drag-and-drop\")}>Close</button>\n//         window.scrollTo(0, 0);\n//       </div>\n\n//       {/* Link to practice more exam-like questions */}\n//       <a\n//         href=\"https://exams.edzest.org/learn/PMP-mock-exams-by-edzest\"\n//         target=\"_blank\"\n//         rel=\"noopener noreferrer\"\n//         className=\"mt-auto text-center text-[#4748ac] text-decoration-none font-semibold py-2 px-6 rounded mt-6 inline-block\"\n//       >\n//         Practice more exam-like questions\n//       </a>\n//     </div>\n//   );\n// };\n\n// export default Solution; // Exporting the Solution component for use in other parts of the application\n\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Solution component displays the user's attempts and correct answers for the quiz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Solution = ({\n  solutions,\n  closeSolution,\n  totalQuestions,\n  quizData,\n  quizCompleted\n}) => {\n  _s();\n  const [currentSolutionIndex, setCurrentSolutionIndex] = useState(0); // Tracks the current question index\n  const navigate = useNavigate(); // Hook for navigation\n\n  // Function to move to the next solution (question)\n  const nextSolution = () => {\n    if (currentSolutionIndex < totalQuestions - 1) {\n      setCurrentSolutionIndex(prev => prev + 1);\n      window.scrollTo(0, 0); // ✅ Scrolls to the top smoothly\n    }\n  };\n\n  // Function to move to the previous solution (question)\n  const prevSolution = () => {\n    if (currentSolutionIndex > 0) {\n      setCurrentSolutionIndex(prev => prev - 1);\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\"\n      }); // ✅ Scrolls to the top smoothly\n    }\n  };\n\n  // ✅ Scrolls to the top when the \"View Solution\" button is clicked\n  const handleViewSolution = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n  const currentQuestion = quizData === null || quizData === void 0 ? void 0 : quizData[currentSolutionIndex]; // Retrieves the current question data\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"solution-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"your-attempt-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Q\", currentSolutionIndex + 1, \". Your Attempt\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), Array.isArray(solutions[currentSolutionIndex]) && solutions[currentSolutionIndex].length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"your-attempt-list\",\n        children: solutions[currentSolutionIndex].map((sol, index) => {\n          var _currentQuestion$defi;\n          // Finding the matched definition text\n          const matchedDefinition = ((_currentQuestion$defi = currentQuestion.definitions.find(def => def.match === sol.correctMatch)) === null || _currentQuestion$defi === void 0 ? void 0 : _currentQuestion$defi.text) || \"Unknown\";\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `your-attempt-row ${sol.correct ? \"correct-attempt\" : \"incorrect-attempt\"}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"serial-number\",\n              children: [index + 1, \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"term-box\",\n              children: sol.term\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"arrow\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"definition-box\",\n              children: [matchedDefinition, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"match-symbol\",\n                children: sol.correct ? \" ✅\" : \" ❌\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u274C Not Attempted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this) // If the user did not attempt this question\n      ]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), quizCompleted && currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"correct-matches-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Correct Matches:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"correct-matches-list\",\n        children: currentQuestion.definitions.map((definition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"correct-match-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"term-box\",\n            children: definition.match\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"arrow\",\n            children: \"\\u2192\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"definition-box\",\n            children: definition.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"solution-buttons-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevSolution,\n        disabled: currentSolutionIndex === 0,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextSolution,\n        disabled: currentSolutionIndex === totalQuestions - 1,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          navigate(\"/drag-and-drop\"); // Navigate to the quiz page\n          window.scrollTo(0, 0); // Scroll to the top after navigating\n        },\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://exams.edzest.org/learn/PMP-mock-exams-by-edzest\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      className: \"mt-auto text-center text-[#4748ac] text-decoration-none font-semibold py-2 px-6 rounded mt-6 inline-block\",\n      children: \"Practice more exam-like questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n_s(Solution, \"75eZXRYAiZmxeJRbY2BvlCCAKMg=\", false, function () {\n  return [useNavigate];\n});\n_c = Solution;\nexport default Solution; // Exporting the Solution component for use in other parts of the application\nvar _c;\n$RefreshReg$(_c, \"Solution\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Solution","solutions","closeSolution","totalQuestions","quizData","quizCompleted","_s","currentSolutionIndex","setCurrentSolutionIndex","navigate","nextSolution","prev","window","scrollTo","prevSolution","top","behavior","handleViewSolution","currentQuestion","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","length","map","sol","index","_currentQuestion$defi","matchedDefinition","definitions","find","def","match","correctMatch","text","correct","term","definition","onClick","disabled","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/happy/Downloads/edzest-website-3/src/DragAndDropQuiz/Components/Solution.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// // Solution component displays the user's attempts and correct answers for the quiz\r\n// const Solution = ({\r\n//   solutions,\r\n//   closeSolution,\r\n//   totalQuestions,\r\n//   quizData,\r\n//   quizCompleted,\r\n// }) => {\r\n//   const [currentSolutionIndex, setCurrentSolutionIndex] = useState(0); // Tracks the current question index\r\n//   const navigate = useNavigate(); // Hook for navigation\r\n\r\n//   // Function to move to the next solution (question)\r\n//   const nextSolution = () => {\r\n//     if (currentSolutionIndex < totalQuestions - 1) {\r\n//       setCurrentSolutionIndex((prev) => prev + 1);\r\n//       window.scrollTo(0, 0); // ✅ Scrolls to the top smoothly\r\n//     }\r\n//   };\r\n\r\n//   // Function to move to the previous solution (question)\r\n//   const prevSolution = () => {\r\n//     if (currentSolutionIndex > 0) {\r\n//       setCurrentSolutionIndex((prev) => prev - 1);\r\n//       window.scrollTo({ top: 0, behavior: \"smooth\" }); // ✅ Scrolls to the top smoothly\r\n//     }\r\n//   };\r\n\r\n//   // ✅ Scrolls to the top when the \"View Solution\" button is clicked\r\n//   const handleViewSolution = () => {\r\n//     window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n//   };\r\n\r\n//   const currentQuestion = quizData?.[currentSolutionIndex]; // Retrieves the current question data\r\n\r\n//   return (\r\n//     <div className=\"solution-container\">\r\n//       {/* Section displaying the user's attempt for the current question */}\r\n//       <div className=\"your-attempt-box\">\r\n//         <h2>Q{currentSolutionIndex + 1}. Your Attempt</h2>\r\n\r\n//         {/* Checking if the user attempted the question */}\r\n//         {Array.isArray(solutions[currentSolutionIndex]) &&\r\n//         solutions[currentSolutionIndex].length > 0 ? (\r\n//           <div className=\"your-attempt-list\">\r\n//             {solutions[currentSolutionIndex].map((sol, index) => {\r\n//               // Finding the matched definition text\r\n//               const matchedDefinition =\r\n//                 currentQuestion.definitions.find(\r\n//                   (def) => def.match === sol.correctMatch\r\n//                 )?.text || \"Unknown\";\r\n\r\n//               return (\r\n//                 <div\r\n//                   key={index}\r\n//                   className={`your-attempt-row ${\r\n//                     sol.correct ? \"correct-attempt\" : \"incorrect-attempt\"\r\n//                   }`}\r\n//                 >\r\n//                   <span className=\"serial-number\">{index + 1}.</span>\r\n//                   <div className=\"term-box\">{sol.term}</div>\r\n//                   <div className=\"arrow\">→</div>\r\n//                   <div className=\"definition-box\">\r\n//                     {matchedDefinition}\r\n//                     <span className=\"match-symbol\">\r\n//                       {sol.correct ? \" ✅\" : \" ❌\"}\r\n//                     </span>\r\n//                   </div>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         ) : (\r\n//           <p>❌ Not Attempted</p> // If the user did not attempt this question\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Section displaying the correct answers */}\r\n//       {quizCompleted && currentQuestion && (\r\n//         <div className=\"correct-matches-box\">\r\n//           <h3>Correct Matches:</h3>\r\n//           <div className=\"correct-matches-list\">\r\n//             {currentQuestion.definitions.map((definition, index) => (\r\n//               <div key={index} className=\"correct-match-row\">\r\n//                 <div className=\"term-box\">{definition.match}</div>\r\n//                 <div className=\"arrow\">→</div>\r\n//                 <div className=\"definition-box\">{definition.text}</div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Navigation buttons for the solutions */}\r\n//       <div className=\"solution-buttons-container\">\r\n//         <button onClick={prevSolution} disabled={currentSolutionIndex === 0}>\r\n//           Previous\r\n//         </button>\r\n//         <button\r\n//           onClick={nextSolution}\r\n//           disabled={currentSolutionIndex === totalQuestions - 1}\r\n//         >\r\n//           Next\r\n//         </button>\r\n//         {/* Redirecting user back to the drag-and-drop quiz screen when closing the solution */}\r\n//         <button onClick={() => navigate(\"/drag-and-drop\")}>Close</button>\r\n//         window.scrollTo(0, 0);\r\n//       </div>\r\n\r\n//       {/* Link to practice more exam-like questions */}\r\n//       <a\r\n//         href=\"https://exams.edzest.org/learn/PMP-mock-exams-by-edzest\"\r\n//         target=\"_blank\"\r\n//         rel=\"noopener noreferrer\"\r\n//         className=\"mt-auto text-center text-[#4748ac] text-decoration-none font-semibold py-2 px-6 rounded mt-6 inline-block\"\r\n//       >\r\n//         Practice more exam-like questions\r\n//       </a>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Solution; // Exporting the Solution component for use in other parts of the application\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// Solution component displays the user's attempts and correct answers for the quiz\r\nconst Solution = ({ solutions, closeSolution, totalQuestions, quizData, quizCompleted }) => {\r\n  const [currentSolutionIndex, setCurrentSolutionIndex] = useState(0); // Tracks the current question index\r\n  const navigate = useNavigate(); // Hook for navigation\r\n\r\n  // Function to move to the next solution (question)\r\n  const nextSolution = () => {\r\n    if (currentSolutionIndex < totalQuestions - 1) {\r\n      setCurrentSolutionIndex((prev) => prev + 1);\r\n      window.scrollTo(0, 0); // ✅ Scrolls to the top smoothly\r\n    }\r\n  };\r\n\r\n  // Function to move to the previous solution (question)\r\n  const prevSolution = () => {\r\n    if (currentSolutionIndex > 0) {\r\n      setCurrentSolutionIndex((prev) => prev - 1);\r\n      window.scrollTo({ top: 0, behavior: \"smooth\" }); // ✅ Scrolls to the top smoothly\r\n    }\r\n  };\r\n\r\n  // ✅ Scrolls to the top when the \"View Solution\" button is clicked\r\n  const handleViewSolution = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  const currentQuestion = quizData?.[currentSolutionIndex]; // Retrieves the current question data\r\n\r\n  return (\r\n    <div className=\"solution-container\">\r\n      \r\n      {/* Section displaying the user's attempt for the current question */}\r\n      <div className=\"your-attempt-box\">\r\n        <h2>Q{currentSolutionIndex + 1}. Your Attempt</h2>\r\n        \r\n        {/* Checking if the user attempted the question */}\r\n        {Array.isArray(solutions[currentSolutionIndex]) && solutions[currentSolutionIndex].length > 0 ? (\r\n          <div className=\"your-attempt-list\">\r\n            {solutions[currentSolutionIndex].map((sol, index) => {\r\n              \r\n              // Finding the matched definition text\r\n              const matchedDefinition =\r\n                currentQuestion.definitions.find((def) => def.match === sol.correctMatch)?.text || \"Unknown\";\r\n\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={`your-attempt-row ${sol.correct ? \"correct-attempt\" : \"incorrect-attempt\"}`}\r\n                >\r\n                  <span className=\"serial-number\">{index + 1}.</span>\r\n                  <div className=\"term-box\">{sol.term}</div>\r\n                  <div className=\"arrow\">→</div>\r\n                  <div className=\"definition-box\">\r\n                    {matchedDefinition}\r\n                    <span className=\"match-symbol\">{sol.correct ? \" ✅\" : \" ❌\"}</span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <p>❌ Not Attempted</p> // If the user did not attempt this question\r\n        )}\r\n      </div>\r\n\r\n      {/* Section displaying the correct answers */}\r\n      {quizCompleted && currentQuestion && (\r\n        <div className=\"correct-matches-box\">\r\n          <h3>Correct Matches:</h3>\r\n          <div className=\"correct-matches-list\">\r\n            {currentQuestion.definitions.map((definition, index) => (\r\n              <div key={index} className=\"correct-match-row\">\r\n                <div className=\"term-box\">{definition.match}</div>\r\n                <div className=\"arrow\">→</div>\r\n                <div className=\"definition-box\">{definition.text}</div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Navigation buttons for the solutions */}\r\n      <div className=\"solution-buttons-container\">\r\n        <button onClick={prevSolution} disabled={currentSolutionIndex === 0}>\r\n          Previous\r\n        </button>\r\n        <button onClick={nextSolution} disabled={currentSolutionIndex === totalQuestions - 1}>\r\n          Next\r\n        </button>\r\n        {/* Redirecting user back to the drag-and-drop quiz screen when closing the solution */}\r\n        <button onClick={() => { \r\n          navigate(\"/drag-and-drop\"); // Navigate to the quiz page\r\n          window.scrollTo(0, 0);  // Scroll to the top after navigating\r\n        }}>\r\n          Close\r\n        </button>\r\n      </div>\r\n\r\n      {/* Link to practice more exam-like questions */}\r\n      <a\r\n        href=\"https://exams.edzest.org/learn/PMP-mock-exams-by-edzest\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"mt-auto text-center text-[#4748ac] text-decoration-none font-semibold py-2 px-6 rounded mt-6 inline-block\"\r\n      >\r\n        Practice more exam-like questions\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Solution; // Exporting the Solution component for use in other parts of the application\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}